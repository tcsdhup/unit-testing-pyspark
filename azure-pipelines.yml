trigger:
  - master

pr: none

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  - group: coverage_thresholds
  - name: artifact_dir
    value: pyspark_example

  - name: project_name
    value: calculator

stages:
  - stage: CodeAnalysis
    displayName: Static Code Analysis
    jobs:
      - job: Analysis
        displayName: Static Code Analysis

        steps:
          - bash: |
              set -x
              mkdir -p "$(Build.ArtifactStagingDirectory)/$(artifact_dir)"
              cp -r *.py requirements.txt "$(Build.ArtifactStagingDirectory)/$(artifact_dir)/"
            displayName: 'Include apps code to Build Artifacts'
          - task: UsePythonVersion@0
            displayName: 'Use Python 3.x'

          - bash: |
              set -x
              python3 -m venv $(Build.ArtifactStagingDirectory)/venv
              . $(Build.ArtifactStagingDirectory)/venv/bin/activate
              cd $(Build.ArtifactStagingDirectory)/$(artifact_dir)/
              pip install -r requirements.txt
            displayName: 'create virtual env and install dependencies'
          - bash: |
              pwd
              . $(Build.ArtifactStagingDirectory)/venv/bin/activate
              #cd $(Build.ArtifactStagingDirectory)/$(artifact_dir)/
              flake8 --exclude=venv* --statistics
            displayName: 'Code Analysis using Lint'
            continueOnError: true
          - bash: |
              set -x
              . $(Build.ArtifactStagingDirectory)/venv/bin/activate
              black $(Build.ArtifactStagingDirectory)/$(artifact_dir)
              flake8 --exclude=venv* --statistics
            displayName: 'Formatting the code using black'
            continueOnError: true
          #          - bash: |
          #              set -x
          #              . $(Build.ArtifactStagingDirectory)/venv/bin/activate
          #              pytest -v --cov=$(project_name)
          #            displayName: 'Unit Tests run using pytest'


          - bash: |
              set -x
              . $(Build.ArtifactStagingDirectory)/venv/bin/activate
              bandit -r $(Build.ArtifactStagingDirectory)/$(artifact_dir)
            displayName: 'Testing for Security Flaws in the Application using bandit'
            continueOnError: true
      - job: 'ParallelTesting'
        displayName: 'Run Unit Tests'
        strategy:
          parallel: 1

        steps:
          - task: UsePythonVersion@0
            displayName: 'Use Python 3.x'
            inputs:
              versionSpec: 3.7.5

          - script: 'python -m pip install --upgrade pip && pip install -r $(System.DefaultWorkingDirectory)/requirements.txt'
            displayName: 'Install dependencies'

          - script: |
              pytest $(System.DefaultWorkingDirectory)/ --doctest-modules --junitxml=junit/test-results.xml
            displayName: 'pytest'
            continueOnError: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results **/test-results.xml'
            inputs:
              testResultsFiles: '**/test-results.xml'
              testRunTitle: 'Python $(python.version)'
            condition: succeededOrFailed()

          - script: |
              set -x
              pwd
              echo $(System.DefaultWorkingDirectory)
              ls $(System.DefaultWorkingDirectory)
              ls -la
              pytest --cov=$(System.DefaultWorkingDirectory)/ $(System.DefaultWorkingDirectory)/ --cov-fail-under=$(python_coverage_threshold) --cov-report=html:$(System.DefaultWorkingDirectory)/coverage_report
              ls $(System.DefaultWorkingDirectory)
            displayName: 'Generate code coverage'
            continueOnError: true
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage from pytest-cov'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage_report/index.html
