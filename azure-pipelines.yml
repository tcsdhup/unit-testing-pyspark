trigger:
  - master

pr: none

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  - group: coverage_thresholds
  - name: artifact_dir
    value: pyspark_example

  - name: project_name
    value: calculator

stages:
  - stage: CodeAnalysis
    displayName: Static Code Analysis
    jobs:
      - job: Analysis
        displayName: Static Code Analysis and Unit Tests

        steps:
          - bash: |
              set -x
              mkdir -p "$(Build.ArtifactStagingDirectory)/$(artifact_dir)"
              cp -r * requirements.txt "$(Build.ArtifactStagingDirectory)/$(artifact_dir)/"
            displayName: 'Include apps code to Build Artifacts'

          - task: UsePythonVersion@0
            inputs:
              versionSpec: 3.6.10
            displayName: 'Use Python 3.x'

          - bash: |
              set -x
              python3 -m venv $(Build.ArtifactStagingDirectory)/venv
              . $(Build.ArtifactStagingDirectory)/venv/bin/activate
              cd $(Build.ArtifactStagingDirectory)/$(artifact_dir)/
              pip install -r requirements.txt
            displayName: 'create virtual env and install dependencies'

          - bash: |
              set -x
              . $(Build.ArtifactStagingDirectory)/venv/bin/activate
              flake8 --exclude=venv* --statistics $(Build.ArtifactStagingDirectory)/$(artifact_dir)

            displayName: 'Code Analysis using Lint'
            continueOnError: true

          - bash: |
              set -x
              . $(Build.ArtifactStagingDirectory)/venv/bin/activate
              black $(Build.ArtifactStagingDirectory)/$(artifact_dir)
              flake8 --exclude=venv* --statistics $(Build.ArtifactStagingDirectory)/$(artifact_dir)
            displayName: 'Formatting the code using black'
            continueOnError: true




          - bash: |
              set -x
              . $(Build.ArtifactStagingDirectory)/venv/bin/activate
              bandit -r $(Build.ArtifactStagingDirectory)/$(artifact_dir)
            displayName: 'Testing for Security Flaws in the Application using bandit'
            continueOnError: true




          - script: |
              . $(Build.ArtifactStagingDirectory)/venv/bin/activate
              pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html --cov-fail-under=$(python_coverage_threshold)
            displayName: 'pytest'
            continueOnError: true

          - task: PublishTestResults@2
            displayName: 'Publish Test Results **/test-results.xml'
            inputs:
              testResultsFiles: '**/test-results.xml'
              testRunTitle: 'Python $(python.version)'
            condition: succeededOrFailed()


          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage from pytest-cov'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
              failIfCoverageEmpty: false

          - task: PublishBuildArtifacts@1
            displayName: Publish Build Artifacts
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)/$(artifact_dir)'
              artifactName: 'drop'
